name: DotNet

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    paths:
    - '**.cs'
    - '**.csproj'
  
env:
   DOTNET_VERSION: '4.5.2'
   ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  

jobs:
  build:
    name: build-and-test
    runs-on: windows-latest
    # grants permissions for the artifact to be uploaded
    permissions:
      contents: read
      packages: write
    steps:
    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can acces it and clones the repo
      - uses: actions/checkout@v3
      # Set up DOT.NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        #with:
        #  dotnet-version: ${{env.DOTNET_VERSION}}
      # Set up MSBuild and add to path  
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
        
   
      
      # Set up NuGet to install NuGet dependencies
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.2
#      - name: Navigate to Workspace
#        run: cd $GITHUB_WORKSPACE

      
      # Restore dependencies to the project
      - name: Install dependencies
        run: dotnet restore
      
      # NuGet call to restore packages
      - name: Restore Packages
        run: nuget restore Verademo-dotnet.sln

# Results in an error not finding the solution files to build off, possibly due to being --no-restore
#      - name: Build
#        run: dotnet build 
#      - name: Test
#        run: dotnet test --no-restore --verbosity normal

         # [DEBUG]: listing directories after MSBUILD
 

      # Build the solution
      - name: Build Solution
        run: |
          msbuild.exe Verademo-dotnet.sln  /nologo /nr:false /p:DeployOnBuild=true /p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:DeleteExistingFiles=True /p:SkipInvalidConfigurations=true /p:PackageLocation=./.. /p:DebugSymbols=true  /p:platform="Any CPU" /p:configuration="Debug" 
      

      - name: List files in the repository and zip artifact
        run: |
          dir ${{ github.workspace }}
          mkdir -p ${{ github.workspace }}/artifact
          Compress-Archive -Path C:\Reference -DestinationPath C:\Archives\Draft.zip
          dir ${{ github.workspace }}/artifact
      - run: ls
      
       # Upload the artifact of the zip archive
      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: VerademoZip
          path: "./Verademo-dotnet.zip" 
      
  security:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Check out main branch
      uses: actions/checkout@v2
      with:
        path: '${{ github.workspace }}/artifact'
    
    - name: Setup Java
      uses: actions/setup-java@v3.5.1
      with:
        # The Java Verion
        java-version: '11'
        distribution: 'microsoft'
    

    - name: Download a Build Artifact
      uses: actions/download-artifact@v3.0.0
      with:
        # Artifact name
        name: VerademoZip # optional
        # Destination path
        path: "./Verademo-dotnet.zip"  # optional
   
    - run: ls -la
    - run: uname -a
    - run: whoami
    - run: curl --version
    - run: java --version
    - run: curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
    - run: unzip pipeline-scan-LATEST.zip 
    - run: java -jar pipeline-scan.jar -vid ${{ secrets.VERACODE_API_ID }} -vkey ${{ secrets.VERACODE_API_KEY }} -f  ./Verademo-dotnet.zip 

#    - name: Veracode Pipeline-Scan
#      # You may pin to the exact commit or the version.
#      # uses: veracode/Veracode-pipeline-scan-action@8c25cb8c06c0b2684e896b6d07048ea68ce892b5
#      uses: veracode/Veracode-pipeline-scan-action@pipeline-scan-beta-v0.0.3
#      with:
#        # vid
#        vid: ${{secrets.VERACODE_API_ID}}
#        # vkey
#        vkey: ${{secrets.VERACODE_API_KEY}}
#        # Filename of the packaged application to upload and scan.
#        file: Verademo-dotnet.zip
#        # GITHUB_TOKEN or a repo scoped PAT.
#        token: ${{github.token}} # default is ${{ github.token }}
#        # Name of the security policy to download as a file. Required only if you want to download the configuration for a custom policy defined by your organization. After downloading the policy, you can provide this file in a subsequent command using the policy_file parameter.
#        #request_policy: # optional
#        # Fail the pipeline job if the scan finds flaws of the specified severities. Enter a comma-separated list of severities in quotation marks.
#        #fail_on_severity: # optional
#        # Fail the pipeline job if the scan finds flaws of the specified CWEs. Enter a comma-separated list of CWE IDs.
#        #fail_on_cwe: # optional
#        # Filter the flaws that exist in the specified baseline file and show only the additional flaws in the current scan.
#        #baseline_file: # optional
#        # Name of the Veracode default policy rule to apply to the scan results. You can only use this parameter with a Veracode default policy.
#        #policy_name: # optional
#        # Name of the local policy file you want to apply to the scan results. To download this file, use the --request_policy parameter.
#        #policy_file: # optional
#        # Amount of time, in minutes, for the Pipeline Scan to wait before reporting an unsuccessful scan if the scan does not complete. Default is 60 minutes, which is also the maximum value.
#        #timeout: # optional
#        # Enter true to show detailed messages for each issue in the results summary.
#        #issue_details: # optional
#        # Enter true to show a human-readable results summary on the console. Default is true.
#        summary_display: true # optional
#        # Enter true to show the JSON containing the scan results on the console. Default is false.
#        #json_display: # optional
#        # Enter true to display detailed messages in the scan results. Default is false.
#        #verbose: # optional
#        # Enter true to save the scan results as a human-readable file. Default is false.
#        summary_output: true # optional
#        # Enter the filename of the scan results summary file. The file is stored in the current directory. Default is results.txt.
#        summary_output_file: readable-results.txt # optional
#        # Enter true to save the scan results in JSON format. Default is true.
#        json_output: true # optional
#        # Rename the JSON file that contains the scan results. The file is stored in the current directory. Default filename is results.json.
#        json_output_file: results.json # optional
#        # Enter the filename in the current directory to save results that violate pass-fail criteria. Default is filtered_results.json.
#        #filtered_json_output_file: # optional
#        # Enter the name of the CI/CD code repository that runs a Pipeline Scan. This parameter adds the repository name to the scan results, which can help you track scans across repositories.
#        project_name: Verademo # optional
#        # Enter the source control URL for the CI/CD code repository that runs a Pipeline Scan.
#        project_url: https://github.com/bnreplah/verademo-dotnet # optional
#        # Enter the source control reference, revision, or branch for the CI/CD code repository that runs a Pipeline Scan.
#        #project_ref: # optional
#        # Enter the [application profile](https://docs.veracode.com/r/request_profile) ID for the application you want to upload and scan.
#        #app_id: # optional
#        # Enter one these values, which are case-sensitive, for the type of development stage: Development, Testing, Release.
#        development_stage: Testing # optional
#        # Enable debug mode. 1 for on
#        debug: 1 # optional
#        # Enable the storage of a baseline file. Takes true or fales
#        store_baseline_file: true # optional
#        # Enter the branch name where the baseline file should be stored
#        store_baseline_file_branch: main # optional
#        # From which results should the baseline file be created. standard = full results || filtered = filtered results
#        create_baseline_from: standard # optional
#        # Fail the build upon findings. Takes true or false
#        fail_build: false # optional

#    - name: Veracode Upload And Scan
#  # You may pin to the exact commit or the version.
#  # uses: veracode/veracode-uploadandscan-action@35794dab9fbcd28fac19e44963f80646b27f4a7f
#      uses: veracode/veracode-uploadandscan-action@0.2.4
#      with:
#        # appname
#        appname: Verademo-net # default is ${{ github.repository }}
#        # createprofile
#        createprofile: false # default is true
#        # filepath
#        filepath: ./Verademo-dotnet.zip
#        # version
#        version: ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }} # default is Scan from Github job: ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}
#        # vid
#        vid: ${{ secrets.VERACODE_API_ID }}
#        # vkey
#        vkey: ${{ secrets.VERACODE_API_KEY }}
#        # true or false
#        # automatically delete the current scan if there are any errors when uploading files or starting the scan
#        deleteincompletescan: true # optional
#        # specify version of the Java API Wrapper; default is latest
#        #javawrapperversion: # optional
#        # show detailed diagnostic information, which you can use for debugging, in the output.
#        debug: true # optional


