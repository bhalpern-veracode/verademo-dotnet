# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4
# This is an example of using VeraDemoDotNet test application with the Veracode Static Pipeline scanner.  A Veracode subscription is required.

# Default template for yaml azure pipeline
# trigger
# - main
#
# pool:
#   vmimage: ubuntu-latest
#
# steps:
# - script: echo Hello, World!
#   displayName:'Run a one line script'
#
# - script: |
#   echo Add other tasks to build, test, and deploy your project
#   echo see https://aka.ms/yml for more details
#   displayName: 'Run a multi line script'
#


trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: DownloadPipelineArtifact@2
  inputs:
    patterns: '**/*.exe,**/*.dll,**/*.pdb' # ensures Veracode gets the PDB files for Static Analysis

# This task makes the pipeline build artifacts available in a known location for upload to Veracode
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)'
    artifactName: Debug

- task: Veracode@3
  inputs:
    ConnectionDetailsSelection: 'Credentials'
    apiId: '$(VERACODE_API_ID)'
    apiKey: '$(VERACODE_API_KEY)'
    veracodeAppProfile: '$(system.teamProject)'
    version: '$(build.buildNumber)'
    filepath: '$(System.DefaultWorkingDirectory)' # filepath or folderpath of files to upload to Veracode
    createProfile: true
    importResults: true
    maximumWaitTime: '360'

- task: CmdLine@2
  displayName: Veracode Static Pipeline Scanner
  inputs:
    script: |
      curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
      unzip -o pipeline-scan-LATEST.zip
      java -jar pipeline-scan.jar -vid $(VERACODE_API_ID) -vkey $(VERACODE_API_KEY) -f $(build.artifactstagingdirectory)\Verademo-dotnet.zip || true

- task: PowerShell@2
  displayName: Veracode SCA Scanner
  inputs:
    targetType: 'inline' #Before it was looking for powershell script to execute, and the target type by default is filepath
    script: |
      Set-ExecutionPolicy AllSigned -Scope Process -Force
      iex ((New-Object System.Net.WebClient).DownloadString('https://download.srcclr.com/ci.ps1')) 
      srcclr scan --allow-dirty
  env:
    SRCCLR_API_TOKEN: $(SRCCLRTOKEN)

# to scan this way targetType need to be inline
# given error code 1: issues with authentication need to add srcclr token as enviornmental variable
- task: Veracode Flaw Importer@3
  inputs:
    ConnectionDetailsSelection: 'Credentials'
    apiId: '$(VERACODE_API_ID)'
    apiKey: '$(VERACODE_API_KEY)'
    veracodeAppProfile: '$(system.teamProject)'
    sandboxName: 
    scanType: 'Dynamic and Static Analysis'
    importType: 'All Flaws'
    workItemType: 'Bug'
    area: '$(system.teamProject)/flaws'
    overwriteAreaPathInWorkItemsOnImport: true
    flawImportLimit: '1000'

- task: PublishBuildArtifacts@1
  displayName: Create Build Artifact for Veracode Static Pipeline Scanner Results
  inputs:
    PathtoPublish: 'results.json'
    ArtifactName: 'Build'
    publishLocation: 'Container'
